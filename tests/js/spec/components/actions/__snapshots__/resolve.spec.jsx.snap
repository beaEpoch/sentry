// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResolveActions with confirmation step renders 1`] = `
.glamor-0 {
  width: 12px;
  height: 12px;
  cursor: pointer;
  z-index: 999;
  position: relative;
  pointer-events: none;
  -webkit-animation: animation-1vh9m9r-expandOut 1.5s ease-out infinite;
  animation: animation-1vh9m9r-expandOut 1.5s ease-out infinite;
  visibility: hidden;
  display: inline-block;
  position: relative;
}

.glamor-0,
.glamor-0:before,
.glamor-0:after {
  position: absolute;
  display: block;
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 50%;
}

.glamor-0:before,
.glamor-0:after {
  content: '';
}

.glamor-0:before {
  width: 75%;
  height: 75%;
}

.glamor-0:after {
  width: 50%;
  height: 50%;
}

<ResolveActions
  confirmLabel="Resolve"
  confirmMessage="Are you sure???"
  hasRelease={false}
  isAutoResolved={false}
  isResolved={false}
  onUpdate={[Function]}
  orgId="org-1"
  projectId="proj-1"
  shouldConfirm={true}
>
  <div
    style={
      Object {
        "display": "inline-block",
      }
    }
  >
    <CustomResolutionModal
      onCanceled={[Function]}
      onSelected={[Function]}
      orgId="org-1"
      projectId="proj-1"
      show={false}
    >
      <Modal
        animation={false}
        autoFocus={true}
        backdrop={true}
        bsClass="modal"
        dialogComponentClass={[Function]}
        enforceFocus={true}
        keyboard={true}
        manager={
          ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          }
        }
        onHide={[Function]}
        renderBackdrop={[Function]}
        restoreFocus={true}
        show={false}
      >
        <Modal
          autoFocus={true}
          backdrop={true}
          backdropClassName="modal-backdrop"
          containerClassName="modal-open"
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onEntering={[Function]}
          onExited={[Function]}
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={false}
        />
      </Modal>
    </CustomResolutionModal>
    <div
      className="btn-group"
    >
      <ActionLink
        className="btn btn-default btn-sm"
        confirmLabel="Resolve"
        disabled={false}
        message="Are you sure???"
        onAction={[Function]}
        shouldConfirm={true}
        title="Resolve"
      >
        <Confirm
          cancelText="Cancel"
          confirmText="Resolve"
          message="Are you sure???"
          onConfirm={[Function]}
          priority="primary"
        >
          <a
            className="btn btn-default btn-sm"
            onClick={[Function]}
            title="Resolve"
          >
             
            <span
              className="icon-checkmark"
              style={
                Object {
                  "marginRight": 5,
                }
              }
            />
            <GuideAnchor
              target="resolve"
              type="text"
            >
              <span
                className="guide-anchor anchor-type-text"
              >
                <StyledGuideAnchor
                  active={false}
                  className="guide-anchor-ping resolve"
                  type="text"
                >
                  <div
                    className="guide-anchor-ping resolve glamor-0 glamor-1"
                    type="text"
                  />
                </StyledGuideAnchor>
              </span>
            </GuideAnchor>
            Resolve
          </a>
          <Modal
            animation={false}
            autoFocus={true}
            backdrop={true}
            bsClass="modal"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
          >
            <Modal
              autoFocus={true}
              backdrop={true}
              backdropClassName="modal-backdrop"
              containerClassName="modal-open"
              enforceFocus={true}
              keyboard={true}
              manager={
                ModalManager {
                  "add": [Function],
                  "containers": Array [],
                  "data": Array [],
                  "handleContainerOverflow": true,
                  "hideSiblingNodes": true,
                  "isTopModal": [Function],
                  "modals": Array [],
                  "remove": [Function],
                }
              }
              onEntering={[Function]}
              onExited={[Function]}
              onHide={[Function]}
              renderBackdrop={[Function]}
              restoreFocus={true}
              show={false}
            />
          </Modal>
        </Confirm>
      </ActionLink>
      <DropdownLink
        alwaysRenderMenu={true}
        anchorRight={false}
        caret={true}
        className="btn btn-default btn-sm"
        disabled={false}
        key="resolve-dropdown"
        title=""
      >
        <DropdownMenu
          keepMenuOpen={false}
        >
          <span
            className="dropdown"
          >
            <a
              className="dropdown-actor btn btn-default btn-sm dropdown-toggle"
              onClick={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
            >
              <div
                className="dropdown-actor-title"
              >
                <span />
                <i
                  className="icon-arrow-down"
                />
              </div>
            </a>
            <ul
              className="dropdown-menu"
              onClick={[Function]}
              onMouseLeave={[Function]}
            >
              <MenuItem
                header={true}
              >
                <li
                  className="dropdown-header"
                  href={null}
                  role="presentation"
                  title={null}
                >
                  Resolved In
                </li>
              </MenuItem>
              <MenuItem
                noAnchor={true}
              >
                <li
                  className=""
                  href={null}
                  role="presentation"
                  title={null}
                >
                  <Tooltip
                    title="Set up release tracking in order to use this feature."
                  >
                    <ActionLink
                      className="tip"
                      confirmLabel="Resolve"
                      disabled={false}
                      message="Are you sure???"
                      onAction={[Function]}
                      shouldConfirm={true}
                      title="Set up release tracking in order to use this feature."
                    >
                      <Confirm
                        cancelText="Cancel"
                        confirmText="Resolve"
                        message="Are you sure???"
                        onConfirm={[Function]}
                        priority="primary"
                      >
                        <a
                          className="tip"
                          onClick={[Function]}
                          title="Set up release tracking in order to use this feature."
                        >
                           
                          The next release
                        </a>
                        <Modal
                          animation={false}
                          autoFocus={true}
                          backdrop={true}
                          bsClass="modal"
                          dialogComponentClass={[Function]}
                          enforceFocus={true}
                          keyboard={true}
                          manager={
                            ModalManager {
                              "add": [Function],
                              "containers": Array [],
                              "data": Array [],
                              "handleContainerOverflow": true,
                              "hideSiblingNodes": true,
                              "isTopModal": [Function],
                              "modals": Array [],
                              "remove": [Function],
                            }
                          }
                          onHide={[Function]}
                          renderBackdrop={[Function]}
                          restoreFocus={true}
                          show={false}
                        >
                          <Modal
                            autoFocus={true}
                            backdrop={true}
                            backdropClassName="modal-backdrop"
                            containerClassName="modal-open"
                            enforceFocus={true}
                            keyboard={true}
                            manager={
                              ModalManager {
                                "add": [Function],
                                "containers": Array [],
                                "data": Array [],
                                "handleContainerOverflow": true,
                                "hideSiblingNodes": true,
                                "isTopModal": [Function],
                                "modals": Array [],
                                "remove": [Function],
                              }
                            }
                            onEntering={[Function]}
                            onExited={[Function]}
                            onHide={[Function]}
                            renderBackdrop={[Function]}
                            restoreFocus={true}
                            show={false}
                          />
                        </Modal>
                      </Confirm>
                    </ActionLink>
                  </Tooltip>
                  <Tooltip
                    title="Set up release tracking in order to use this feature."
                  >
                    <ActionLink
                      className="tip"
                      confirmLabel="Resolve"
                      disabled={false}
                      message="Are you sure???"
                      onAction={[Function]}
                      shouldConfirm={true}
                      title="Set up release tracking in order to use this feature."
                    >
                      <Confirm
                        cancelText="Cancel"
                        confirmText="Resolve"
                        message="Are you sure???"
                        onConfirm={[Function]}
                        priority="primary"
                      >
                        <a
                          className="tip"
                          onClick={[Function]}
                          title="Set up release tracking in order to use this feature."
                        >
                           
                          The current release
                        </a>
                        <Modal
                          animation={false}
                          autoFocus={true}
                          backdrop={true}
                          bsClass="modal"
                          dialogComponentClass={[Function]}
                          enforceFocus={true}
                          keyboard={true}
                          manager={
                            ModalManager {
                              "add": [Function],
                              "containers": Array [],
                              "data": Array [],
                              "handleContainerOverflow": true,
                              "hideSiblingNodes": true,
                              "isTopModal": [Function],
                              "modals": Array [],
                              "remove": [Function],
                            }
                          }
                          onHide={[Function]}
                          renderBackdrop={[Function]}
                          restoreFocus={true}
                          show={false}
                        >
                          <Modal
                            autoFocus={true}
                            backdrop={true}
                            backdropClassName="modal-backdrop"
                            containerClassName="modal-open"
                            enforceFocus={true}
                            keyboard={true}
                            manager={
                              ModalManager {
                                "add": [Function],
                                "containers": Array [],
                                "data": Array [],
                                "handleContainerOverflow": true,
                                "hideSiblingNodes": true,
                                "isTopModal": [Function],
                                "modals": Array [],
                                "remove": [Function],
                              }
                            }
                            onEntering={[Function]}
                            onExited={[Function]}
                            onHide={[Function]}
                            renderBackdrop={[Function]}
                            restoreFocus={true}
                            show={false}
                          />
                        </Modal>
                      </Confirm>
                    </ActionLink>
                  </Tooltip>
                  <Tooltip
                    title="Set up release tracking in order to use this feature."
                  >
                    <ActionLink
                      className="tip"
                      confirmLabel="Resolve"
                      disabled={false}
                      message="Are you sure???"
                      onAction={[Function]}
                      shouldConfirm={false}
                      title="Set up release tracking in order to use this feature."
                    >
                      <a
                        className="tip"
                        disabled={false}
                        onClick={[Function]}
                      >
                        Another version…
                      </a>
                    </ActionLink>
                  </Tooltip>
                </li>
              </MenuItem>
            </ul>
          </span>
        </DropdownMenu>
      </DropdownLink>
    </div>
  </div>
</ResolveActions>
`;

exports[`ResolveActions without confirmation renders 1`] = `
.glamor-0 {
  width: 12px;
  height: 12px;
  cursor: pointer;
  z-index: 999;
  position: relative;
  pointer-events: none;
  -webkit-animation: animation-1vh9m9r-expandOut 1.5s ease-out infinite;
  animation: animation-1vh9m9r-expandOut 1.5s ease-out infinite;
  visibility: hidden;
  display: inline-block;
  position: relative;
}

.glamor-0,
.glamor-0:before,
.glamor-0:after {
  position: absolute;
  display: block;
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
  border-radius: 50%;
}

.glamor-0:before,
.glamor-0:after {
  content: '';
}

.glamor-0:before {
  width: 75%;
  height: 75%;
}

.glamor-0:after {
  width: 50%;
  height: 50%;
}

<ResolveActions
  confirmLabel="Resolve"
  hasRelease={false}
  isAutoResolved={false}
  isResolved={false}
  onUpdate={[Function]}
  orgId="org-1"
  projectId="proj-1"
>
  <div
    style={
      Object {
        "display": "inline-block",
      }
    }
  >
    <CustomResolutionModal
      onCanceled={[Function]}
      onSelected={[Function]}
      orgId="org-1"
      projectId="proj-1"
      show={false}
    >
      <Modal
        animation={false}
        autoFocus={true}
        backdrop={true}
        bsClass="modal"
        dialogComponentClass={[Function]}
        enforceFocus={true}
        keyboard={true}
        manager={
          ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          }
        }
        onHide={[Function]}
        renderBackdrop={[Function]}
        restoreFocus={true}
        show={false}
      >
        <Modal
          autoFocus={true}
          backdrop={true}
          backdropClassName="modal-backdrop"
          containerClassName="modal-open"
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onEntering={[Function]}
          onExited={[Function]}
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={false}
        />
      </Modal>
    </CustomResolutionModal>
    <div
      className="btn-group"
    >
      <ActionLink
        className="btn btn-default btn-sm"
        confirmLabel="Resolve"
        disabled={false}
        onAction={[Function]}
        shouldConfirm={false}
        title="Resolve"
      >
        <a
          className="btn btn-default btn-sm"
          disabled={false}
          onClick={[Function]}
        >
          <span
            className="icon-checkmark"
            style={
              Object {
                "marginRight": 5,
              }
            }
          />
          <GuideAnchor
            target="resolve"
            type="text"
          >
            <span
              className="guide-anchor anchor-type-text"
            >
              <StyledGuideAnchor
                active={false}
                className="guide-anchor-ping resolve"
                type="text"
              >
                <div
                  className="guide-anchor-ping resolve glamor-0 glamor-1"
                  type="text"
                />
              </StyledGuideAnchor>
            </span>
          </GuideAnchor>
          Resolve
        </a>
      </ActionLink>
      <DropdownLink
        alwaysRenderMenu={true}
        anchorRight={false}
        caret={true}
        className="btn btn-default btn-sm"
        disabled={false}
        key="resolve-dropdown"
        title=""
      >
        <DropdownMenu
          keepMenuOpen={false}
        >
          <span
            className="dropdown"
          >
            <a
              className="dropdown-actor btn btn-default btn-sm dropdown-toggle"
              onClick={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
            >
              <div
                className="dropdown-actor-title"
              >
                <span />
                <i
                  className="icon-arrow-down"
                />
              </div>
            </a>
            <ul
              className="dropdown-menu"
              onClick={[Function]}
              onMouseLeave={[Function]}
            >
              <MenuItem
                header={true}
              >
                <li
                  className="dropdown-header"
                  href={null}
                  role="presentation"
                  title={null}
                >
                  Resolved In
                </li>
              </MenuItem>
              <MenuItem
                noAnchor={true}
              >
                <li
                  className=""
                  href={null}
                  role="presentation"
                  title={null}
                >
                  <Tooltip
                    title="Set up release tracking in order to use this feature."
                  >
                    <ActionLink
                      className="tip"
                      confirmLabel="Resolve"
                      disabled={false}
                      onAction={[Function]}
                      shouldConfirm={false}
                      title="Set up release tracking in order to use this feature."
                    >
                      <a
                        className="tip"
                        disabled={false}
                        onClick={[Function]}
                      >
                        The next release
                      </a>
                    </ActionLink>
                  </Tooltip>
                  <Tooltip
                    title="Set up release tracking in order to use this feature."
                  >
                    <ActionLink
                      className="tip"
                      confirmLabel="Resolve"
                      disabled={false}
                      onAction={[Function]}
                      shouldConfirm={false}
                      title="Set up release tracking in order to use this feature."
                    >
                      <a
                        className="tip"
                        disabled={false}
                        onClick={[Function]}
                      >
                        The current release
                      </a>
                    </ActionLink>
                  </Tooltip>
                  <Tooltip
                    title="Set up release tracking in order to use this feature."
                  >
                    <ActionLink
                      className="tip"
                      confirmLabel="Resolve"
                      disabled={false}
                      onAction={[Function]}
                      shouldConfirm={false}
                      title="Set up release tracking in order to use this feature."
                    >
                      <a
                        className="tip"
                        disabled={false}
                        onClick={[Function]}
                      >
                        Another version…
                      </a>
                    </ActionLink>
                  </Tooltip>
                </li>
              </MenuItem>
            </ul>
          </span>
        </DropdownMenu>
      </DropdownLink>
    </div>
  </div>
</ResolveActions>
`;
